// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Roles {
  user
  admin
  editor
}

enum SeriesTypes {
  manhwa
  manga
  manhua
}

model User {
  username   String   @id @db.VarChar(50)
  email      String   @unique
  name       String?  @db.VarChar(100)
  role       Roles    @default(user)
  imgUrl     String?  @default("/profiles/index.png")
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  bookmarks Bookmark[]

  @@map("users")
}

model Bookmark {
  user       User     @relation(fields: [username], references: [username])
  username   String
  series     Series   @relation(fields: [series_id], references: [id], onDelete: Cascade)
  series_id  Int
  created_at DateTime @default(now())

  @@id([username, series_id])
}

model Series {
  id          Int         @id @default(autoincrement())
  title       String      @unique @db.VarChar(100)
  alternative String?     @db.VarChar(100)
  description String      @db.Text
  imgUrl      String?     @default("/series/index.png")
  type        SeriesTypes @default(manhwa)
  status      String      @default("Ongoing")
  release     String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  authors   Author[]
  artists   Artist[]
  genres    Genre[]
  chapters  Chapter[]
  bookmarks Bookmark[]

  @@map("series")
}

model Chapter {
  id         Int      @id @default(autoincrement())
  title      String?  @db.VarChar(100)
  chapter    String   @db.VarChar(10)
  dirUrl     String   @db.VarChar(100)
  series     Series   @relation(fields: [series_id], references: [id], onDelete: Cascade)
  series_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  images Chapter_Image[]

  @@map("chapters")
}

model Chapter_Image {
  id         Int     @id @default(autoincrement())
  chapter    Chapter @relation(fields: [chapter_id], references: [id], onDelete: Cascade)
  chapter_id Int
  image_url  String  @db.VarChar(100)

  @@map("chapter_images")
}

model Author {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  series Series[]

  @@map("authors")
}

model Artist {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  series Series[]

  @@map("artists")
}

model Genre {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  series Series[]

  @@map("genres")
}
